<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>overthewire - Tag - Omer&#39;s Blog</title>
        <link>https://omer-biz.github.io/tags/overthewire/</link>
        <description>overthewire - Tag - Omer&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>omerabdi@pm.me (Omer)</managingEditor>
            <webMaster>omerabdi@pm.me (Omer)</webMaster><lastBuildDate>Wed, 21 Apr 2021 22:08:02 &#43;0300</lastBuildDate><atom:link href="https://omer-biz.github.io/tags/overthewire/" rel="self" type="application/rss+xml" /><item>
    <title>Narnia 7 - OverTheWire</title>
    <link>https://omer-biz.github.io/posts/narnia-7-overthewire/</link>
    <pubDate>Wed, 21 Apr 2021 22:08:02 &#43;0300</pubDate>
    <author>Author</author>
    <guid>https://omer-biz.github.io/posts/narnia-7-overthewire/</guid>
    <description><![CDATA[Narnia 7 - OverTheWire Intro This level is kind of a combination of the previous two Levels. You have to overwrite a function pointer, but you have to do it using a format string vulnerability there is no overflowing this time.
Now Let&rsquo;s run the program see what it does.
narnia7@narnia:/narnia$ ./narnia7 Usage: ./narnia7 &lt;buffer&gt; narnia7@narnia:/narnia$ The program asks us for an input.
narnia7@narnia:/narnia$ ./narnia7 AAAA goodfunction() = 0x80486ff hackedfunction() = 0x8048724 before : ptrf() = 0x80486ff (0xffffd628) I guess you want to come to the hackedfunction.]]></description>
</item><item>
    <title>Narnia 6 - OverTheWire</title>
    <link>https://omer-biz.github.io/posts/narnia-6-overthewire/</link>
    <pubDate>Tue, 20 Apr 2021 13:48:36 &#43;0300</pubDate>
    <author>Author</author>
    <guid>https://omer-biz.github.io/posts/narnia-6-overthewire/</guid>
    <description><![CDATA[Narnia 6 - OverTheWire Introduction This level is all about overflowing into a local variable, specifically to a local function pointer variable. When you run the program without any argument it will exit asking for 2 arguments. These two arguments are mapped or copied to the two local variables on the stack, namely b1, and b2. They are copied using strcpy which we know is not a safe way of copying from user inputs.]]></description>
</item><item>
    <title>Narnia 5 - OverTheWire</title>
    <link>https://omer-biz.github.io/posts/narnia-5-overthewire/</link>
    <pubDate>Fri, 16 Apr 2021 12:19:38 &#43;0300</pubDate>
    <author>Author</author>
    <guid>https://omer-biz.github.io/posts/narnia-5-overthewire/</guid>
    <description><![CDATA[Narnia 5 - OverTheWire Introduction This level introduces what format string vulnerabilities are. A program is said to have a format string vulnerability if it pass unsensitized user input to one the printf family of functions. These are as follows.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #include &lt;stdio.h&gt; int printf(const char *format, ...); int fprintf(FILE *stream, const char *format, ...); int dprintf(int fd, const char *format, .]]></description>
</item><item>
    <title>What Is OverTheWire</title>
    <link>https://omer-biz.github.io/posts/what-is-overthewire/</link>
    <pubDate>Tue, 09 Feb 2021 10:34:24 &#43;0300</pubDate>
    <author>Author</author>
    <guid>https://omer-biz.github.io/posts/what-is-overthewire/</guid>
    <description><![CDATA[What is OverTheWire Overthewire is a really good resource for someone really new to cybersecurity to learn about cybersecurity. It has a hands on approach of teaching things. It has what I call Seasons. These so called Seasons are not actually numbered but rather named, and each season has an episode. At least that&rsquo;s how I imagine it in my head.
Each season teaches a different cybersecurity concept. For example season 1 (Bandit) teaches about the Linux Operating System.]]></description>
</item></channel>
</rss>
