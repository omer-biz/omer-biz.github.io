<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Writeup - Category - Omer&#39;s Blog</title>
        <link>https://omer-biz.github.io/categories/writeup/</link>
        <description>Writeup - Category - Omer&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>omerabdi@pm.me (Omer)</managingEditor>
            <webMaster>omerabdi@pm.me (Omer)</webMaster><lastBuildDate>Wed, 09 Nov 2022 20:29:58 &#43;0300</lastBuildDate><atom:link href="https://omer-biz.github.io/categories/writeup/" rel="self" type="application/rss+xml" /><item>
    <title>Space | HackTheBox</title>
    <link>https://omer-biz.github.io/posts/space-htb/</link>
    <pubDate>Wed, 09 Nov 2022 20:29:58 &#43;0300</pubDate>
    <author>Author</author>
    <guid>https://omer-biz.github.io/posts/space-htb/</guid>
    <description><![CDATA[Disclaimer This post is not meant to be an in depth tutorial, meaning it won&rsquo;t tell you each and every step you need to take to solve the challenge, rather it&rsquo;s meant to guide you, and give you a high level solution so you can solve the challenge in your own way.
Intro The binary is simple in structure and straight forward, you have a space of 0x1f(31) to fill, with eip&rsquo;s offset being at 0x12(18).]]></description>
</item><item>
    <title>Behemoth 2 - OverTheWire</title>
    <link>https://omer-biz.github.io/posts/behemoth-2-overthewire/</link>
    <pubDate>Wed, 05 May 2021 17:27:31 &#43;0300</pubDate>
    <author>Author</author>
    <guid>https://omer-biz.github.io/posts/behemoth-2-overthewire/</guid>
    <description><![CDATA[Behemoth 2 - OverTheWire Intro The are more than one way to solve this challenge, and me being me I chose the hard way. After finally solving this challenge it was time to read other peoples writeups, as usual. I will share the easy way at the end, but I think you could learn a thing or two from the way I solved it. To start I decided to directly go and reverse the binary since Behemoth doesn&rsquo;t offer any source code.]]></description>
</item><item>
    <title>Narnia 7 - OverTheWire</title>
    <link>https://omer-biz.github.io/posts/narnia-7-overthewire/</link>
    <pubDate>Wed, 21 Apr 2021 22:08:02 &#43;0300</pubDate>
    <author>Author</author>
    <guid>https://omer-biz.github.io/posts/narnia-7-overthewire/</guid>
    <description><![CDATA[Narnia 7 - OverTheWire Intro This level is kind of a combination of the previous two Levels. You have to overwrite a function pointer, but you have to do it using a format string vulnerability there is no overflowing this time.
Now Let&rsquo;s run the program see what it does.
narnia7@narnia:/narnia$ ./narnia7 Usage: ./narnia7 &lt;buffer&gt; narnia7@narnia:/narnia$ The program asks us for an input.
narnia7@narnia:/narnia$ ./narnia7 AAAA goodfunction() = 0x80486ff hackedfunction() = 0x8048724 before : ptrf() = 0x80486ff (0xffffd628) I guess you want to come to the hackedfunction.]]></description>
</item><item>
    <title>Narnia 6 - OverTheWire</title>
    <link>https://omer-biz.github.io/posts/narnia-6-overthewire/</link>
    <pubDate>Tue, 20 Apr 2021 13:48:36 &#43;0300</pubDate>
    <author>Author</author>
    <guid>https://omer-biz.github.io/posts/narnia-6-overthewire/</guid>
    <description><![CDATA[Narnia 6 - OverTheWire Introduction This level is all about overflowing into a local variable, specifically to a local function pointer variable. When you run the program without any argument it will exit asking for 2 arguments. These two arguments are mapped or copied to the two local variables on the stack, namely b1, and b2. They are copied using strcpy which we know is not a safe way of copying from user inputs.]]></description>
</item><item>
    <title>Narnia 5 - OverTheWire</title>
    <link>https://omer-biz.github.io/posts/narnia-5-overthewire/</link>
    <pubDate>Fri, 16 Apr 2021 12:19:38 &#43;0300</pubDate>
    <author>Author</author>
    <guid>https://omer-biz.github.io/posts/narnia-5-overthewire/</guid>
    <description><![CDATA[Narnia 5 - OverTheWire Introduction This level introduces what format string vulnerabilities are. A program is said to have a format string vulnerability if it pass unsensitized user input to one the printf family of functions. These are as follows.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include &lt;stdio.h&gt; int printf(const char *format, ...); int fprintf(FILE *stream, const char *format, ...); int dprintf(int fd, const char *format, .]]></description>
</item></channel>
</rss>
